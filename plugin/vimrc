" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=9999 foldmethod=marker spell:
"
" Environment {

    " Identify platform {
        silent function! OSX()
            return has('macunix')
        endfunction
        silent function! LINUX()
            return has('unix') && !has('macunix') && !has('win32unix')
        endfunction
        silent function! WINDOWS()
            return  (has('win16') || has('win32') || has('win64'))
        endfunction
    " }

    " Basics {
        set nocompatible        " Must be first line
        if !WINDOWS()
            set shell=/bin/sh
        endif
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if WINDOWS()
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
        endif
    " }

" }

" General {

    set background=dark         " Assume a dark background
    " if !has('gui')
        "set term=$TERM          " Make arrow and other keys work
    " endif
    filetype plugin indent on   " Automatically detect file types.
    syntax on                   " Syntax highlighting
    "set mouse=a                 " Automatically enable mouse usage
    set mousehide               " Hide the mouse cursor while typing
    scriptencoding utf-8

    if has('clipboard')
        if has('unnamedplus')  " When possible use + register for copy-paste
            set clipboard=unnamed,unnamedplus
        else         " On mac and Windows, use * register for copy-paste
            set clipboard=unnamed
        endif
    endif


    "set autowrite                       " Automatically write a file when leaving a modified buffer
    set shortmess+=filmnrxoOtT          " Abbrev. of messages (avoids 'hit enter')
    set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
    set virtualedit=onemore             " Allow for cursor beyond last character
    set history=1000                    " Store a ton of history (default is 20)
    "set spell                           " Spell checking on
    set hidden                          " Allow buffer switching without saving
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    " Setting up the directories {
        set backup                  " Backups are nice ...
        set backupdir=$HOME/.vim/backupfile
        if has('persistent_undo')
            set undofile                " So is persistent undo ...
            set undolevels=1000         " Maximum number of changes that can be undone
            set undoreload=10000        " Maximum number lines to save for undo on a buffer reload
            set undodir=$HOME/.vim/undofile
        endif
    " }

" }

" Vim UI {

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode

    set cursorline                  " Highlight current line
    syntax on

    highlight clear SignColumn      " SignColumn should match background
    highlight clear LineNr          " Current line number row will have same background color in relative mode
    highlight clear CursorLineNr    " Remove highlight color from current line number

    if has('cmdline_info')
        set ruler                   " Show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        set showcmd                 " Show partial commands in status line and
                                    " Selected characters/lines in visual mode
    endif

    if has('statusline')
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right alignedset statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*
    endif

    set backspace=indent,eol,start  " Backspace for dummies
    set linespace=0                 " No extra spaces between rows
    set nu                          " Line numbers on
    set showmatch                   " Show matching brackets/parenthesis
    set incsearch                   " Find as you type search
    set hlsearch                    " Highlight search terms
    set winminheight=0              " Windows can be 0 line high
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
    set scrolljump=5                " Lines to scroll when cursor leaves screen
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set foldenable                  " Auto fold code
    set foldlevel=9999
    set list
    set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" }

" Formatting {

    "set nowrap                      " Do not wrap long lines
    set wrap                        " Do wrap long lines
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    set matchpairs+=<:>             " Match, to be used with %
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    "set comments=sl:/*,mb:*,elx:*/  " auto format comment blocks

    autocmd BufNewFile,BufRead *.coffee set filetype=coffee

    " Workaround vim-commentary for Haskell
    autocmd FileType haskell setlocal commentstring=--\ %s
    " Workaround broken colour highlighting in Haskell
    autocmd FileType haskell,rust setlocal nospell

" }

 " vundle {
 set nocompatible
 filetype off
 set rtp+=~/.vim/bundle/Vundle.vim
 " 如果在windows下使用的话，设置为
 " set rtp+=$HOME/.vim/bundle/vundle/
 call vundle#begin()
 " }
 "
 " let Vundle manage Vundle
 " required!
 Plugin 'gmarik/Vundle.vim'
    " Deps {
        "Plugin 'gmarik/vundle'
        Plugin 'MarcWeber/vim-addon-mw-utils'
        Plugin 'tomtom/tlib_vim'
        Plugin 'mileszs/ack.vim'
        Plugin 'dyng/ctrlsf.vim'
        Plugin 'larrupingpig/vimgdb-for-vim7.4'
    " }

    " General {
        Plugin 'scrooloose/nerdtree'
        "Plugin 'altercation/vim-colors-solarized'
        "Plugin 'spf13/vim-colors'
        Plugin 'tpope/vim-surround'
        Plugin 'tpope/vim-repeat'
        Plugin 'jiangmiao/auto-pairs'
        Plugin 'ctrlpvim/ctrlp.vim'
        Plugin 'tacahiroy/ctrlp-funky'
        Plugin 'kristijanhusak/vim-multiple-cursors'
        "Plugin 'vim-scripts/sessionman.vim'
        Plugin 'matchit.zip'
        "Plugin 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
        "Plugin 'Lokaltog/vim-powerline'
        Plugin 'bling/vim-airline'
        "Plugin 'bling/vim-bufferline'
        "Plugin 'fholgado/minibufexpl.vim'
        "Plugin 'mkitt/tabline.vim'
        Plugin 'Lokaltog/vim-easymotion'
        Plugin 'terryma/vim-expand-region'
        Plugin 'jistr/vim-nerdtree-tabs'
        Plugin 'flazz/vim-colorschemes'
        Plugin 'mbbill/undotree'
        Plugin 'nathanaelkane/vim-indent-guides'
        Plugin 'hellotomcat/supersearch'
        Plugin 'vim-scripts/a.vim'
        Plugin 'mrtazz/DoxygenToolkit.vim'
        "Plugin 'vim-scripts/restore_view.vim'
        "Plugin 'mhinz/vim-signify'
        "Plugin 'tpope/vim-abolish.git'
        "Plugin 'osyo-manga/vim-over'
        "Plugin 'kana/vim-textobj-user'
        "Plugin 'kana/vim-textobj-indent'
        "Plugin 'gcmt/wildfire.vim'
    " }

    " Writing {
        "Plugin 'reedes/vim-litecorrect'
        "Plugin 'reedes/vim-textobj-sentence'
        "Plugin 'reedes/vim-textobj-quote'
        "Plugin 'reedes/vim-wordy'
    " }

    " General Programming {
        Plugin 'scrooloose/syntastic'
        Plugin 'tpope/vim-fugitive'
        "Plugin 'mattn/webapi-vim'
        "Plugin 'mattn/gist-vim'
        Plugin 'scrooloose/nerdcommenter'
        "Plugin 'tpope/vim-commentary'
        Plugin 'godlygeek/tabular'
        Plugin 'majutsushi/tagbar'
        Plugin 'brookhong/DBGPavim'
    " }

    " Snippets & AutoComplete {
        "Plugin 'garbas/vim-snipmate'
        "Plugin 'honza/vim-snippets'
        "Plugin 'Valloric/YouCompleteMe'
        "Plugin 'SirVer/ultisnips'
        Plugin 'Shougo/neocomplcache'
        Plugin 'Shougo/neosnippet'
        Plugin 'Shougo/neosnippet-snippets'
        "Plugin 'Shougo/neocomplete.vim.git'
    " }

    " PHP {
        "Plugin 'spf13/PIV'
        "Plugin 'arnaud-lb/vim-php-namespace'
        "Plugin 'beyondwords/vim-twig'
    " }

    " Python {
        "Plugin 'klen/python-mode'
        "Plugin 'yssource/python.vim'
        "Plugin 'python_match.vim'
        "Plugin 'pythoncomplete'
    " }

    " Javascript {
        "Plugin 'elzr/vim-json'
        "Plugin 'groenewege/vim-less'
        "Plugin 'pangloss/vim-javascript'
        "Plugin 'briancollins/vim-jst'
        "Plugin 'kchmck/vim-coffee-script'
    " }

    " Scala {
        "Plugin 'derekwyatt/vim-scala'
        "Plugin 'derekwyatt/vim-sbt'
        "Plugin 'xptemplate'
    " }

    " Haskell {
        "Plugin 'travitch/hasksyn'
        "Plugin 'dag/vim2hs'
        "Plugin 'Twinside/vim-haskellConceal'
        "Plugin 'Twinside/vim-haskellFold'
        "Plugin 'lukerandall/haskellmode-vim'
        "Plugin 'eagletmt/neco-ghc'
        "Plugin 'eagletmt/ghcmod-vim'
        "Plugin 'Shougo/vimproc.vim'
        "Plugin 'adinapoli/cumino'
        "Plugin 'bitc/vim-hdevtools'
    " }

    " HTML {
        "Plugin 'amirh/HTML-AutoCloseTag'
        "Plugin 'hail2u/vim-css3-syntax'
        "Plugin 'gorodinskiy/vim-coloresque'
        "Plugin 'tpope/vim-haml'
    " }

    " Ruby {
        "Plugin 'tpope/vim-rails'
    " }

    " Puppet {
        "Plugin 'rodjek/vim-puppet'
    " }

    " Go Lang {
        "Plugin 'Blackrush/vim-gocode'
        "Plugin 'fatih/vim-go'
    " }

    " Elixir {
        "Plugin 'elixir-lang/vim-elixir'
        "Plugin 'carlosgaldino/elixir-snippets'
        "Plugin 'mattreduce/vim-mix'
    " }

    " Misc {
        "Plugin 'rust-lang/rust.vim'
        "Plugin 'tpope/vim-markdown'
        "Plugin 'spf13/vim-preview'
        "Plugin 'tpope/vim-cucumber'
        "Plugin 'cespare/vim-toml'
        "Plugin 'quentindecock/vim-cucumber-align-pipes'
        "Plugin 'saltstack/salt-vim'
    " }


 call vundle#end()            " required
 filetype plugin indent on    " required

" }
" Key (re)Mappings {

    " The default leader is '\', but many people prefer ',' as it's in a standard
    " location. To override this behavior and set it back to '\' (or any other
    " character) add the following to your .vimrc.before.local file:
    colorscheme  www
    let mapleader = ','
    let maplocalleader = '_'
    set tags=tags;
    "set autochdir
    let g:acp_enableAtStartup = 0
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_smart_case = 1
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_enable_auto_delimiter = 1
    let g:neocomplcache_max_list = 15
    let g:neocomplcache_force_overwrite_completefunc = 1
    "let g:miniBufExplMapCTabSwitchBufs = 1
    "let g:miniBufExplMapWindowNavVim = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#show_tabs = 0
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:dbgPavimPort = 8989
    let g:dbgPavimMaxDepth = 99
    let g:dbgPavimBreakAtEntry = 0
    "php -dxdebug.remote_autostart=1 -dxdebug.remote_port=8989 tttt.php
    "url XDEBUG_SESSION_START=1
    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9
    let g:airline_theme='molokai'
    nmap <Leader>t :TagbarToggle<CR>
    nmap <Leader>f :NERDTreeToggle<CR>
    nmap <Leader>p :CtrlP<CR>
    nmap <Leader>r :CtrlPFunky<CR>
    nmap <Leader>c :SyntasticCheck<CR>
    nmap <Leader>d :syntax sync fromstart<CR>
    nmap <Leader>b :!php %<CR>
    nnoremap <C-F>f :CtrlSF<CR>
    imap jj <Esc>
    nnoremap <Leader>v mzgvy`zp
    inoremap <C-a> <Home>
    inoremap <C-e> <End>
    inoremap <C-k> <Up>
    inoremap <C-j> <Down>
    inoremap <C-h> <Left>
    inoremap <C-l> <Right>

    "if has("cscope")
    "    set csprg=/usr/local/bin/cscope
    "    set csto=1
    "    set cst
    "    set nocsverb
    "    " add any database in current directory
    "    if filereadable("cscope.out")
    "        cs add cscope.out
    "        " else add database pointed to by environment
    "    elseif $CSCOPE_DB != ""
    "        cs add $CSCOPE_DB
    "    endif
    "    set csverb
    "endif
    "nmap <Leader>add :cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
" }
